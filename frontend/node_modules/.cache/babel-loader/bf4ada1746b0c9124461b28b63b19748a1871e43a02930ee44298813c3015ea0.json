{"ast":null,"code":"var _jsxFileName = \"/Users/taelansakay/TeamWebScraping-1/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport HomePage from './components/Homepage';\nimport FinTastic from './components/FinTastic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [currentView, setCurrentView] = useState('home'); // 'home' or 'chat'\n  const [chatHistory, setChatHistory] = useState([]);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [currentChatId, setCurrentChatId] = useState(null);\n\n  // Helper function to load user-specific chat history\n  const loadUserChatHistory = userEmail => {\n    const savedChats = localStorage.getItem(`fintastic_chats_${userEmail}`);\n    if (savedChats) {\n      setChatHistory(JSON.parse(savedChats));\n    } else {\n      setChatHistory([]); // Reset to empty array for new users\n    }\n  };\n\n  // Check for existing authentication on component mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('fintastic_user');\n    if (savedUser) {\n      const userData = JSON.parse(savedUser);\n      setUser(userData);\n      setIsAuthenticated(true);\n      // Load user-specific chat history\n      loadUserChatHistory(userData.email);\n    }\n  }, []);\n  const handleAuth = (email, password, username = '', authMode) => {\n    let userData;\n    if (authMode === 'signup') {\n      userData = {\n        id: Date.now(),\n        email,\n        username: username || email.split('@')[0],\n        createdAt: new Date().toISOString()\n      };\n    } else {\n      // For demo purposes, create user from login info\n      // In real app, you'd validate against a backend\n      userData = {\n        id: Date.now(),\n        email,\n        username: email.split('@')[0],\n        createdAt: new Date().toISOString()\n      };\n    }\n    localStorage.setItem('fintastic_user', JSON.stringify(userData));\n    setUser(userData);\n    setIsAuthenticated(true);\n\n    // ✅ Load user-specific chat history after authentication\n    loadUserChatHistory(userData.email);\n    setCurrentView('chat');\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('fintastic_user');\n    setUser(null);\n    setIsAuthenticated(false);\n    setChatHistory([]); // ✅ Clear chat history on logout\n    setCurrentChatId(null); // ✅ Reset current chat ID\n    setCurrentView('home');\n  };\n  const handleStartNewChat = () => {\n    const newChatId = Date.now().toString();\n    setCurrentChatId(newChatId);\n    setCurrentView('chat');\n  };\n  const handleGoHome = () => {\n    setCurrentView('home');\n  };\n  const handleLoadChat = chatId => {\n    setCurrentChatId(chatId);\n    setCurrentView('chat');\n  };\n  const handleToggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n  if (currentView === 'chat' && isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(FinTastic, {\n      user: user,\n      onGoHome: handleGoHome,\n      onLogout: handleLogout,\n      chatHistory: chatHistory,\n      setChatHistory: setChatHistory,\n      currentChatId: currentChatId,\n      setCurrentChatId: setCurrentChatId,\n      onStartNewChat: handleStartNewChat,\n      onLoadChat: handleLoadChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(HomePage, {\n    isAuthenticated: isAuthenticated,\n    user: user,\n    chatHistory: chatHistory,\n    onStartNewChat: handleStartNewChat,\n    onLogout: handleLogout,\n    onLoadChat: handleLoadChat,\n    onToggleSidebar: handleToggleSidebar,\n    onAuth: handleAuth\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lOgut/1k1km9m/S77Q71r4nBiJM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","HomePage","FinTastic","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","user","setUser","currentView","setCurrentView","chatHistory","setChatHistory","sidebarOpen","setSidebarOpen","currentChatId","setCurrentChatId","loadUserChatHistory","userEmail","savedChats","localStorage","getItem","JSON","parse","savedUser","userData","email","handleAuth","password","username","authMode","id","Date","now","split","createdAt","toISOString","setItem","stringify","handleLogout","removeItem","handleStartNewChat","newChatId","toString","handleGoHome","handleLoadChat","chatId","handleToggleSidebar","onGoHome","onLogout","onStartNewChat","onLoadChat","fileName","_jsxFileName","lineNumber","columnNumber","onToggleSidebar","onAuth","_c","$RefreshReg$"],"sources":["/Users/taelansakay/TeamWebScraping-1/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport HomePage from './components/Homepage';\nimport FinTastic from './components/FinTastic';\n\nexport default function App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [currentView, setCurrentView] = useState('home'); // 'home' or 'chat'\n  const [chatHistory, setChatHistory] = useState([]);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [currentChatId, setCurrentChatId] = useState(null);\n\n  // Helper function to load user-specific chat history\n  const loadUserChatHistory = (userEmail) => {\n    const savedChats = localStorage.getItem(`fintastic_chats_${userEmail}`);\n    if (savedChats) {\n      setChatHistory(JSON.parse(savedChats));\n    } else {\n      setChatHistory([]); // Reset to empty array for new users\n    }\n  };\n\n  // Check for existing authentication on component mount\n  useEffect(() => {\n    const savedUser = localStorage.getItem('fintastic_user');\n    if (savedUser) {\n      const userData = JSON.parse(savedUser);\n      setUser(userData);\n      setIsAuthenticated(true);\n      // Load user-specific chat history\n      loadUserChatHistory(userData.email);\n    }\n  }, []);\n\n  const handleAuth = (email, password, username = '', authMode) => {\n    let userData;\n    \n    if (authMode === 'signup') {\n      userData = {\n        id: Date.now(),\n        email,\n        username: username || email.split('@')[0],\n        createdAt: new Date().toISOString()\n      };\n    } else {\n      // For demo purposes, create user from login info\n      // In real app, you'd validate against a backend\n      userData = {\n        id: Date.now(),\n        email,\n        username: email.split('@')[0],\n        createdAt: new Date().toISOString()\n      };\n    }\n    \n    localStorage.setItem('fintastic_user', JSON.stringify(userData));\n    setUser(userData);\n    setIsAuthenticated(true);\n    \n    // ✅ Load user-specific chat history after authentication\n    loadUserChatHistory(userData.email);\n    \n    setCurrentView('chat');\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem('fintastic_user');\n    setUser(null);\n    setIsAuthenticated(false);\n    setChatHistory([]); // ✅ Clear chat history on logout\n    setCurrentChatId(null); // ✅ Reset current chat ID\n    setCurrentView('home');\n  };\n\n  const handleStartNewChat = () => {\n    const newChatId = Date.now().toString();\n    setCurrentChatId(newChatId);\n    setCurrentView('chat');\n  };\n\n  const handleGoHome = () => {\n    setCurrentView('home');\n  };\n\n  const handleLoadChat = (chatId) => {\n    setCurrentChatId(chatId);\n    setCurrentView('chat');\n  };\n\n  const handleToggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n\n  if (currentView === 'chat' && isAuthenticated) {\n    return (\n      <FinTastic\n        user={user}\n        onGoHome={handleGoHome}\n        onLogout={handleLogout}\n        chatHistory={chatHistory}\n        setChatHistory={setChatHistory}\n        currentChatId={currentChatId}\n        setCurrentChatId={setCurrentChatId}\n        onStartNewChat={handleStartNewChat}\n        onLoadChat={handleLoadChat}\n      />\n    );\n  }\n\n  return (\n    <HomePage\n      isAuthenticated={isAuthenticated}\n      user={user}\n      chatHistory={chatHistory}\n      onStartNewChat={handleStartNewChat}\n      onLogout={handleLogout}\n      onLoadChat={handleLoadChat}\n      onToggleSidebar={handleToggleSidebar}\n      onAuth={handleAuth}\n    />\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EACxD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAMoB,mBAAmB,GAAIC,SAAS,IAAK;IACzC,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,mBAAmBH,SAAS,EAAE,CAAC;IACvE,IAAIC,UAAU,EAAE;MACdP,cAAc,CAACU,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACxC,CAAC,MAAM;MACLP,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB;EACF,CAAC;;EAED;EACAd,SAAS,CAAC,MAAM;IACd,MAAM0B,SAAS,GAAGJ,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IACxD,IAAIG,SAAS,EAAE;MACb,MAAMC,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAACC,SAAS,CAAC;MACtChB,OAAO,CAACiB,QAAQ,CAAC;MACjBnB,kBAAkB,CAAC,IAAI,CAAC;MACxB;MACAW,mBAAmB,CAACQ,QAAQ,CAACC,KAAK,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAGA,CAACD,KAAK,EAAEE,QAAQ,EAAEC,QAAQ,GAAG,EAAE,EAAEC,QAAQ,KAAK;IAC/D,IAAIL,QAAQ;IAEZ,IAAIK,QAAQ,KAAK,QAAQ,EAAE;MACzBL,QAAQ,GAAG;QACTM,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdP,KAAK;QACLG,QAAQ,EAAEA,QAAQ,IAAIH,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzCC,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;MACpC,CAAC;IACH,CAAC,MAAM;MACL;MACA;MACAX,QAAQ,GAAG;QACTM,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdP,KAAK;QACLG,QAAQ,EAAEH,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7BC,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;MACpC,CAAC;IACH;IAEAhB,YAAY,CAACiB,OAAO,CAAC,gBAAgB,EAAEf,IAAI,CAACgB,SAAS,CAACb,QAAQ,CAAC,CAAC;IAChEjB,OAAO,CAACiB,QAAQ,CAAC;IACjBnB,kBAAkB,CAAC,IAAI,CAAC;;IAExB;IACAW,mBAAmB,CAACQ,QAAQ,CAACC,KAAK,CAAC;IAEnChB,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;EAED,MAAM6B,YAAY,GAAGA,CAAA,KAAM;IACzBnB,YAAY,CAACoB,UAAU,CAAC,gBAAgB,CAAC;IACzChC,OAAO,CAAC,IAAI,CAAC;IACbF,kBAAkB,CAAC,KAAK,CAAC;IACzBM,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACpBI,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IACxBN,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;EAED,MAAM+B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,SAAS,GAAGV,IAAI,CAACC,GAAG,CAAC,CAAC,CAACU,QAAQ,CAAC,CAAC;IACvC3B,gBAAgB,CAAC0B,SAAS,CAAC;IAC3BhC,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;EAED,MAAMkC,YAAY,GAAGA,CAAA,KAAM;IACzBlC,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;EAED,MAAMmC,cAAc,GAAIC,MAAM,IAAK;IACjC9B,gBAAgB,CAAC8B,MAAM,CAAC;IACxBpC,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC;EAED,MAAMqC,mBAAmB,GAAGA,CAAA,KAAM;IAChCjC,cAAc,CAAC,CAACD,WAAW,CAAC;EAC9B,CAAC;EAED,IAAIJ,WAAW,KAAK,MAAM,IAAIJ,eAAe,EAAE;IAC7C,oBACEH,OAAA,CAACF,SAAS;MACRO,IAAI,EAAEA,IAAK;MACXyC,QAAQ,EAAEJ,YAAa;MACvBK,QAAQ,EAAEV,YAAa;MACvB5B,WAAW,EAAEA,WAAY;MACzBC,cAAc,EAAEA,cAAe;MAC/BG,aAAa,EAAEA,aAAc;MAC7BC,gBAAgB,EAAEA,gBAAiB;MACnCkC,cAAc,EAAET,kBAAmB;MACnCU,UAAU,EAAEN;IAAe;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAEN;EAEA,oBACErD,OAAA,CAACH,QAAQ;IACPM,eAAe,EAAEA,eAAgB;IACjCE,IAAI,EAAEA,IAAK;IACXI,WAAW,EAAEA,WAAY;IACzBuC,cAAc,EAAET,kBAAmB;IACnCQ,QAAQ,EAAEV,YAAa;IACvBY,UAAU,EAAEN,cAAe;IAC3BW,eAAe,EAAET,mBAAoB;IACrCU,MAAM,EAAE9B;EAAW;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEN;AAACnD,EAAA,CArHuBD,GAAG;AAAAuD,EAAA,GAAHvD,GAAG;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}